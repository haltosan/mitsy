 ;print "XY"
print;string;X-Y
> "xy", STRING-PRINT, 0, EBP, 0, 0
> 2, PRINT_ACTIVATE, 0, EBP, 0, 0


 ;if x==y 
if;x;y
> 0, CMP, EBP, EBP, X, 0
> 1, CMP, EBP, EBP, Y, 0
> 0, EAX, 0, CMP, X, 0

if;m;n
v2
> 0, CMP, n, EBP, 0, 0
> 1, CMP, [m], EBP, 0, 0
> 0, EAX, 0, CMP, n, 0
goto;[EAX]
goto;{id}t
goto;{id}f
lbl;{id}t
--next instr--
lbl;{id}f

    elif(cells[0]=="if"):
      a.write(">0, "+CMP+", "+EBP+", "+EBP+", "+cells[1]+", 0\n")
      a.write(">1, "+CMP+", "+EBP+", "+EBP+", "+cells[2]+", 0\n")
      a.write(">0, "+EAX+", 0, "+CMP+", "+cells[1]+", 0\n")

    elif(cells[0]=="if"):
      a.write(">0, "+CMP+", "+cells[1]+", "+EBP+", 0, 0\n")
      a.write(">1, "+CMP+", "+cells[2]+", "+EBP+", 0, 0\n")
      a.write(">0, "+EAX+", 0, "+CMP+", "+cells[1]+", 0\n")

nop;
> 0, EAX, 0, EAX, 0, 0

lbl;a
'RUN 1
generate a hash table with the labels and locations'

goto;a
'search up in the hash table the label'
> [LAST INSTRUCTION/NOP], LOCATION

[corrupts 1]
sub;X;Y
x-y
'
> X, TEMPVARS, 0, EBP, 0, 0
> Y, 1, 0, EBP, 0, 0        ;loop counter
lbl;x-y
if;1;0
-goto;x-yT
-goto;x-yF
lbl;x-yF
> 0, TEMPVARS, 0, TEMPVARS, DEC, 0
> 0, 1, 0, 1, DEC, 0
goto;x-y
lbl;x-yT
> 0, EAX, 0, TEMPVARS, 0, 0
'

[corrupts 1]
add;X;Y
x+y
'
> X, TEMPVARS, 0, EBP, 0, 0
> Y, 1, 0, EBP, 0, 0
lbl;x+y
if;1;0
-goto;x+yT
-goto;x+yF
lbl;x+yF
> 0, TEMPVARS, 0, TEMPVARS, INC, 0
> 0, 1, 0, 1, DEC, 0
goto;x+y
lbl;x+yT
> 0, EAX, 0, TEMPVARS, 0, 0
'

var;N;T;V
variable x int = 1
> V, VARS, count, EBP, 0, 0
' RUN 1
create hash table with "name" : [type, value]
place each var into memory
change references to those vars with memory location
'

push;X
'
mov;[esp];X
inc;esp
'

pop;
'
mov;eax;STACK+[esp]
dec;esp
'

call;LBL
'
push;EIP
goto;:LBL
'

return;
'
pop;
goto;[EAX]
'

[corrupts 1(add), 2, 3, 4]
mult;l;a
'
>A, 2, 0, EBP, 0, 0 ;init loop counter
>0, 3, 0, EBP, 0, 0 ;get 0 for comparison
>0, 4, 0, L, 0, 0   ;backup location
lbl;:start
if;2;3              ;cmp loop counter and 0 (at 3)
goto;:end
add;L;4             ;add to self from backup (at 4)
dec;2               ;dec loop counter
goto;:start
lbl;:end
'

+++++++++++++++++++++++++++++++++++++++++
compiler passes

__-1__
 - mult

__0__
partial expand
 - add
 - sub

__1__
partial expand the following instructions:
 - if
 - call
 - return

__2__
fully expand the following instructions:
 - print
 - if
 - nop
 - goto
 - push
 - pop

__3__
look for:
 - lbl
 - var
generate hash tables

__4__
look for only:
 - []
 add 400 to it
 - :
replace with actual locations from hash tables
- /
replace with actual locations from hash tables

__2.5__ (future idea)
optimise by removing nops,
  appending goto's to previous instr

+++++++++++++++++++++++++++++++++++++++++
